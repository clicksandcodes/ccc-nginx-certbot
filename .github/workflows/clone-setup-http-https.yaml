##
# To do:
# Output the github action cicd env vars as json.
# they show up as Object object in GHA action log, currently
name: trying http and https endpoints
on:
  push:
    branches:
      - main
      # - blah

env:
  SSH_USER: ${{ secrets.LINUX_USER_DEVOPS_2A }}
  DEV_SERVER_IP_FROM_GHA_ENV: ${{ secrets.LINUX_DEV_SERVER_IP_2A }}
  DEV_USER_EMAIL_ADDRESS_FROM_GHA_ENV: "patrick.wm.meaney@gmail.com"
jobs:
  job1_login_to_server_setup_environment:
    runs-on: ubuntu-latest
    steps:
      - name: "Take ssh key from github repo, copy it into the ubuntu VM, so we can access the server & run commands"
        env:
          SSH_USER: ${{ secrets.LINUX_USER_DEVOPS_2A }}
          SSH_PRIV_KEY: ${{ secrets.LINUX_SSH_KEY_2A_PRIVATE }}
          DEV_SERVER_IP: ${{ secrets.LINUX_DEV_SERVER_IP_2A }}
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_PRIV_KEY" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          cat >>~/.ssh/config <<END
          Host dev
            HostName $DEV_SERVER_IP
            User $SSH_USER
            IdentityFile ~/.ssh/id_ed25519
            StrictHostKeyChecking no
          END
          ssh dev "echo "#### Ssh connected-- github runner to remote server.""
          ssh dev "cat /etc/os-release"
          ssh dev "echo pwd is $(pwd)"
      # If this fails again... on the stop & rm containers step... run it as two separate steps-- one for each container
      - name: "Remove containers & proj dir to prep env"
        continue-on-error: true
        run: |
          ssh dev "echo "##### Stop the existing docker containers -- nginx and certbot -- if they exist""
          ssh dev "docker stop certbotContainerService && docker rm certbotContainerService"
          ssh dev "docker stop nginxContainerService && docker rm nginxContainerService"
          ssh dev "echo "##### Delete the project directory if it exists""
          ssh dev "sudo rm -rf /home/$SSH_USER/ccc-nginx-certbot"
      - name: "Remove containers & proj dir to prep env"
        run: |
          ssh dev " echo "##### Now we can clone and run it""
          ssh dev "git clone git@github.com:clicksandcodes/ccc-nginx-certbot.git && cd ccc-nginx-certbot && docker-compose up -d"
      - name: "Run commands to setup http, certbot, https"
        run: |
          ssh dev " echo "##### Setup http, certbot, https""
          ssh dev "docker exec nginxContainerService sh -c "envsubst '\$NGINX_HOST' < /etc/nginx/templates/http-json-template.conf.template > /etc/nginx/conf.d/a-http-json-healthcheck.conf" && docker restart nginxContainerService"
        # ssh dev "git clone git@github.com:clicksandcodes/ccc-nginx-certbot.git && docker-compose -f ./ccc-nginx-certbot/docker-compose.yaml up -d"

      # ssh dev "echo "##### Stop the existing docker containers -- nginx and certbot -- if they exist""
      # ssh dev "docker stop nginxContainerService certbotContainerService && docker rm nginxContainerService certbotContainerService"
      # - name: "Delete existing docker container.  If it doesnt exist, dont stop with an error message."
      #   continue-on-error: true
      #   run: |
      #     ssh dev "docker stop nginxDockerContainer && docker rm nginxDockerContainer"
      # - name: "Delete existing project directory If it doesnt exist, dont stop with an error message."
      #   continue-on-error: true
      #   run: |
      #     ssh dev "sudo rm -rf /home/$SSH_USER/ccc-nginx-certbot"
      #     ssh dev "ls /home/$SSH_USER"
      # - name: "Clone the project and setup the environment a bit"
      #   run: |
      #     ssh dev "echo We are in the step of feeding IP from GHA env var into the nginx conf file"
      #     ssh dev "echo dev user email: $DEV_USER_EMAIL_ADDRESS_FROM_GHA_ENV"
      #     ssh dev "cd /home/$SSH_USER"
      #     ssh dev "echo pwd is $(pwd)"
      #     ssh dev "echo clone the repo..."
      #     ssh dev "git clone git@github.com:clicksandcodes/ccc-nginx-certbot.git && docker-compose -f ./ccc-nginx-certbot/docker-compose.yaml up -d"
      # ssh dev "touch ./ccc-nginx-certbot/.env"
      # I dont need to place the IP into this file it needs to be the domain name
      # the ip was during testing.  now we are beyond that. make it the domain name
      # ssh dev "echo NGINX_HOST=$DEV_SERVER_IP_FROM_GHA_ENV >> ./ccc-nginx-certbot/.env"
      # ssh dev "echo the IP for NGINX http json healthcheck Conf file of this commit is: $DEV_SERVER_IP_FROM_GHA_ENV"

      # ssh dev "docker-compose -f /home/runner/work/ccc-nginx-certbot/ccc-nginx-certbot/docker-compose.yaml up -d"
      # ssh dev "docker-compose -f ./ccc-nginx-certbot/docker-compose.yaml up -d"
      # ssh dev "cd ./ccc-nginx-certbot; ls -lah ; pwd"
      # ssh dev "ls -a"
      # So instead of cd ... ls -a, do `cd ccc-nginx-certbot ; ls -lah ; pwd`
      # also, try to keep it all in one step
      #  OR... just run the commands at an absolute directory path
      # - name: "Navigate to project directory"
      #   working-directory: /home/runner/work/ccc-nginx-certbot/ccc-nginx-certbot
      #   run: |
      #     ssh dev "cd ccc-nginx-certbot"
      #     ssh dev "ls -a"


  # job2_http_healthcheck_setup_and_ping:
  #   needs: job1_login_to_server_setup_environment
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: "Take ssh key from github repo, copy it into the ubuntu VM, so we can access the server & run commands"
  #       run: |
  #         mkdir -p ~/.ssh/
  #         echo "$SSH_PRIV_KEY" > ~/.ssh/id_ed25519
  #         chmod 600 ~/.ssh/id_ed25519
  #         cat >>~/.ssh/config <<END
  #         Host dev
  #           HostName $DEV_SERVER_IP
  #           User $SSH_USER
  #           IdentityFile ~/.ssh/id_ed25519
  #           StrictHostKeyChecking no
  #         END
  #         ssh dev "echo "we setup ssh connection, now lets test it" "
  #         ssh dev "cat /etc/os-release"
  #       env:
  #         SSH_USER: ${{ secrets.LINUX_USER_DEVOPS_2A }}
  #         SSH_PRIV_KEY: ${{ secrets.LINUX_SSH_KEY_2A_PRIVATE }}
  #         DEV_SERVER_IP: ${{ secrets.LINUX_DEV_SERVER_IP_2A }}
  #     - name: "Run commands for Nginx Http JSON healthcheck endpoint"
  #       run: |
  #         ssh dev "echo beginnging_of_joZb2_http_healthcheck_setup_and_ping"
  #         ssh dev "cd /home/$SSH_USER/ccc-nginx-certbot"
  #         ssh dev "echo pwd is $(pwd)"
  #         ssh dev "ls"
  #         ssh dev "cd ccc-nginx-certbot"
  #         ssh dev "ls"

  #       # ssh dev "docker-compose up -d"
  #       # ssh dev "docker ps -a"

  # job3_certbot_request_certs:
  #   needs: job2_http_healthcheck_setup_and_ping
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: "Run commands to request certs to upgrade http to https"
  #       run: |
  #         ssh dev "echo beginnging_of_job3_certbot_request_certs"

  # job4_https_healthcheck_setup_and_ping:
  #   needs: job3_certbot_request_certs
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: "Run commands to request certs to upgrade http to https"
  #       run: |
  #         ssh dev "echo job4_https_healthcheck_setup_and_ping"

# test1_ping_http:
#   needs: job1_login_to_server_setup_environment
#   runs-on: ubuntu-latest
#   steps:
#     - name: "Ping the endpoint we created and check for status"
#       env:
#         DEV_SERVER_IP: ${{ secrets.LINUX_DEV_SERVER_IP_2A }}
#       run: |
#         echo "##### Running curl on dev server 2A"

#         status_msg=$(curl -s http://$DEV_SERVER_IP | jq -r '.status_msg')
#         echo "Status Message: $status_msg"
#         if echo "$status_msg" | grep -q "howdy_amigo"; then
#           echo "##### The http endpoint is alive."
#           exit 0
#         else
#           echo "##### The http endpoint is not alive."
#           exit 1
#         fi